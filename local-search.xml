<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/22/duilib%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <url>/2022/09/22/duilib%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Duilib-资源文件"><a href="#Duilib-资源文件" class="headerlink" title="Duilib 资源文件"></a>Duilib 资源文件</h1><h2 id="Duilib-资源文件的四种分类"><a href="#Duilib-资源文件的四种分类" class="headerlink" title="Duilib 资源文件的四种分类"></a>Duilib 资源文件的四种分类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">UILIB_RESTYPE</span><br>&#123;<br>  UILIB_FILE = <span class="hljs-number">1</span>,    <span class="hljs-comment">// 来自磁盘文件</span><br>  UILIB_ZIP,         <span class="hljs-comment">// 来自磁盘 zip 压缩包  </span><br>  UILIB_RESOURCE,    <span class="hljs-comment">// 来自资源</span><br>  UILIB_ZIPRESOURCE  <span class="hljs-comment">// 来自资源的压缩包</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>具体来说：Duilib 加载界面信息是从字符串、文件、资源。</p><p>Duilib 控件的来源是：标准控件、插件、自定义控件。</p><h3 id="从资源中读取-zip"><a href="#从资源中读取-zip" class="headerlink" title="从资源中读取 zip"></a>从资源中读取 zip</h3><p>首先需要把资源添加到 resource 中，然后再通过 FindResource 等 API 读取。能够把资源里的文件内容保存到内存中，然后根据文件大小，以 zip 的方式解析，解压后即可获取文件的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h2 id="zip-保存内容"><a href="#zip-保存内容" class="headerlink" title="zip 保存内容"></a>zip 保存内容</h2><p>zip 需要把样式 xml 文件以及界面资源打包在同一个压缩包里，否则提示无法解析 xml 的错误。然后，zip 的目录结构就相当于文件的根路径，如果需要分层，比如界面资源放在 zip 包里的 res 目录下，zip&#x2F;res&#x2F;bk.jpg，那么读取时界面文件设置的路径就写，res&#x2F;bk.jpg 即可。</p><h3 id="加载方式源代码分析"><a href="#加载方式源代码分析" class="headerlink" title="加载方式源代码分析"></a>加载方式源代码分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CControlUI* <span class="hljs-title">CDialogBuilder::Create</span><span class="hljs-params">(STRINGorID xml, LPCTSTR type, </span></span><br><span class="hljs-params"><span class="hljs-function">            IDialogBuilderCallback* pCallback, CPaintManagerUI* pManager,</span></span><br><span class="hljs-params"><span class="hljs-function">            CControlUI* pParent)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 资源ID为0-65535，两个字节；字符串指针为4个字节</span><br>    <span class="hljs-comment">// 字符串以&lt;开头认为是XML字符串，否则认为是XML文件</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">HIWORD</span>(xml.m_lpstr) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-comment">// 从字符串中加载xml</span><br>        <span class="hljs-keyword">if</span>(*(xml.m_lpstr) == _T(<span class="hljs-string">&#x27;&lt;&#x27;</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!m_xml.<span class="hljs-built_in">Load</span>(xml.m_lpstr))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 从文件中加载xml</span><br>            <span class="hljs-keyword">if</span>(!m_xml.<span class="hljs-built_in">LoadFromFile</span>(xml.m_lpstr))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 从资源中加载xml</span><br>        HRSRC hResource = ::<span class="hljs-built_in">FindResource</span>(CPaintManagerUI::<span class="hljs-built_in">GetResourceDll</span>(),<br>                                         xml.m_lpstr, type);<br>        <span class="hljs-keyword">if</span>(hResource == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        HGLOBAL hGlobal = ::<span class="hljs-built_in">LoadResource</span>(CPaintManagerUI::<span class="hljs-built_in">GetResourceDll</span>(),<br>                                         hResource);<br>        <span class="hljs-keyword">if</span>(hGlobal == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">FreeResource</span>(hResource);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>        m_pCallback = pCallback;<br>        <span class="hljs-keyword">if</span>(!m_xml.<span class="hljs-built_in">LoadFromMem</span>((BYTE*)::<span class="hljs-built_in">LockResource</span>(hGlobal), <br>           ::<span class="hljs-built_in">SizeofResource</span>(CPaintMangerUI::<span class="hljs-built_in">GetResourceDll</span>(), hResource)))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ::<span class="hljs-built_in">FreeResource</span>(hResource);<br>        m_pstrtype = type;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(pCallback, pManager, pParent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UILIB-FILE-形式加载资源"><a href="#UILIB-FILE-形式加载资源" class="headerlink" title="UILIB_FILE 形式加载资源"></a>UILIB_FILE 形式加载资源</h3><p>这种方式会加载存放在硬盘中的资源。</p><p>具体使用方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CDuiString strResourcePath = CPaintManagerUI::<span class="hljs-built_in">GetInstancePath</span>();<br>strResourcePath += _T(<span class="hljs-string">&quot;skin\\&quot;</span>);<br><span class="hljs-comment">// 设置资源路径</span><br>CPaintManagerUI::<span class="hljs-built_in">SetResourcePath</span>(strResourcePath.<span class="hljs-built_in">GetData</span>());<br></code></pre></td></tr></table></figure><h3 id="UILIB-ZIP-形式加载资源"><a href="#UILIB-ZIP-形式加载资源" class="headerlink" title="UILIB_ZIP 形式加载资源"></a>UILIB_ZIP 形式加载资源</h3><p>这种方式会加载存放在硬盘中的压缩包资源。</p><p>具体使用方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 设置资源类型</span><br>CDuiString strResourcePath = CPaintManagerUI::<span class="hljs-built_in">GetInstancePath</span>();<br>strResourcePath += _T(<span class="hljs-string">&quot;skin\\&quot;</span>);<br><span class="hljs-comment">// 设置资源路径</span><br>CPaintManagerUI::<span class="hljs-built_in">SetResourcePath</span>(strResourcePath.<span class="hljs-built_in">GetData</span>();<br><span class="hljs-comment">// 设置压缩包资源，可以加上第三个密码参数（默认为 NULL ）</span><br>CPaintManagerUI::<span class="hljs-built_in">SetResourceZip</span>(_T(<span class="hljs-string">&quot;skin.zip&quot;</span>), <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="UILIB-RESOURCE-形式加载资源"><a href="#UILIB-RESOURCE-形式加载资源" class="headerlink" title="UILIB_RESOURCE 形式加载资源"></a>UILIB_RESOURCE 形式加载资源</h3><p>这种方式会加载可执行程序中的资源文件。</p><p>具体使用方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 设置资源类型</span><br>CPaintManagerUI::<span class="hljs-built_in">SetResourceType</span>(UILIB_RESOURCE);<br></code></pre></td></tr></table></figure><h3 id="UILIB-ZIPRESOURCE-形式加载资源"><a href="#UILIB-ZIPRESOURCE-形式加载资源" class="headerlink" title="UILIB_ZIPRESOURCE 形式加载资源"></a>UILIB_ZIPRESOURCE 形式加载资源</h3><p>这种方式会加载可执行程序中的 zip 压缩文件。</p><p>具体使用方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 设置资源类型</span><br>CPaintManagerUI::<span class="hljs-built_in">SetResourceType</span>(UILIB_ZIPRESOURCE);<br>HRSRC hResource = ::<span class="hljs-built_in">FindResource</span>(CPaintManagerUI::<span class="hljs-built_in">GetResourceDll</span>(), <br>                  _T(<span class="hljs-string">&quot;IDR_ZIPRES&quot;</span>), _T(<span class="hljs-string">&quot;ZIPRES&quot;</span>));<br><span class="hljs-keyword">if</span>(hResource != <span class="hljs-literal">NULL</span>) &#123;<br>    DWORD dwSize = <span class="hljs-number">0</span>;<br>    HGLOBAL hGlobal = ::<span class="hljs-built_in">LoadResource</span>(CPaintManagerUI::<span class="hljs-built_in">GetResourceDll</span>(),<br>                        hResource);<br>    <span class="hljs-keyword">if</span>(hGlobal != <span class="hljs-literal">NULL</span>) &#123;<br>            dwSize = ::<span class="hljs-built_in">SizeofResource</span>(CPaintManagerUI::<span class="hljs-built_in">GetResourceDll</span>(),<br>                       hResource);<br>            <span class="hljs-keyword">if</span>(dwSize &gt; <span class="hljs-number">0</span>) &#123;<br>                CPaintManagerUI::<span class="hljs-built_in">SetResourceZip</span>((LPBYTE)::<span class="hljs-built_in">LockResource</span>(hGlobal),<br>                                                dwSize);<br>            &#125;<br>    &#125;<br>    ::<span class="hljs-built_in">FreeResource</span>(hResource);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过GitHub Action自动部署GitHub Pages</title>
    <link href="/2022/06/11/%E9%80%9A%E8%BF%87GitHub%20Action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2GitHub%20Pages/"/>
    <url>/2022/06/11/%E9%80%9A%E8%BF%87GitHub%20Action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2GitHub%20Pages/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么使用GitHub-Actions"><a href="#为什么使用GitHub-Actions" class="headerlink" title="为什么使用GitHub Actions?"></a>为什么使用GitHub Actions?</h1><p>这是因为，在国内，经常会出现hexo deploy失败的情况。导致我的博文更新了，却无法更新到GitHub Pages上。因此，这个时候就需要GitHub Actions了。</p><h1 id="GitHub-Actions是什么"><a href="#GitHub-Actions是什么" class="headerlink" title="GitHub Actions是什么?"></a>GitHub Actions是什么?</h1><p>GitHub Actions 是一个持续集成和持续交付（CI&#x2F;CD）平台，可用于自动执行构建、测试和部署管道。您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境。</p><p>GitHub Actions 不仅仅是 DevOps，还允许您在存储库中发生其他事件时运行工作流程。例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。</p><p>GitHub 提供 Linux、Windows 和 macOS 虚拟机来运行工作流程，或者您可以在自己的数据中心或云基础架构中托管自己的自托管运行器。</p><h1 id="使用-GitHub-Actions-自动部署的好处："><a href="#使用-GitHub-Actions-自动部署的好处：" class="headerlink" title="使用 GitHub Actions 自动部署的好处："></a>使用 GitHub Actions 自动部署的好处：</h1><p>可以直接在线编辑 md 文件，立即生效。假设你已发布一篇文章，过几天你在别的电脑上浏览发现有几个明显的错别字，这是完全不能容忍的。但此时你电脑上又没有 hexo + node.js + git 等完整的开发环境，重新配置开发环境明显不现实。如果使用 CI，你可以直接用浏览器访问 GitHub 上的项目仓库，直接编辑带错别字的 md 文章，改完，在线提交，稍等片刻，你的网站就自动更新了。</p><p>如果手动部署，需要先执行 hexo g 编译生成静态文件， 然后推送 public 整个文件夹到 GitHub 上，当后期网站文章、图片较多时候，很多时候连接 GitHub 不是那么顺畅，经常要傻等很长的上传时间。使用 GitHub Actions 自动部署，你只需 push _post 文件里单独的 md 文件即可，其他不用管，效率瞬间高了许多，其中的好处，谁用谁知道。</p><p>使用 GitHub Actions，你还可以一次性将这些静态博客页面部署到多个服务器上，例如：GitHub Pages、Gitee pages、七牛云、阿里云、腾讯云等等。</p><h1 id="GitHub-Actions-的组件"><a href="#GitHub-Actions-的组件" class="headerlink" title="GitHub Actions 的组件"></a>GitHub Actions 的组件</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>GitHub Actions 主要涉及的概念有 Workflows、Events、Jobs、Actions、Runners。</p><p>GitHub Actions 的 Workflow 可以配置为当 repo 中发生 push 或者 pull 操作时触发。Workflow 包含一个或多个 job，这些 job 可以按顺序执行，也可以并行执行。每个 job 都将在其自己的虚拟机运行器中运行，或者容器内运行，并且具有一个或多个 Step，这些 Step 要么运行您定义的脚本，要么运行 Action，这些 Action 可以从 Marketplace 中找到。</p><p><img src="/images/overview-actions-simple.png"></p><h3 id="Workflows"><a href="#Workflows" class="headerlink" title="Workflows"></a>Workflows</h3><p>Workflows 指的是一个可配置的自动化过程，它将运行一个或多个 job。Workflows 是定义在存储仓库 .github&#x2F;workflows 下的 .yml 文件。当指定的 Events 触发时，就会运行该 Workflows，也可以手动触发，或者按定义的时间表触发。</p><p>一个存储库能够包含多个 Workflows，每个 Workflows 能够执行不一样的任务。例如，你可以有一个 Workflows 用于构建和测试 pull 请求，另一个 Workflows 用于在每次创建发布时部署应用程序，还有一个 Workflows 在每次有人打开新 issue 时添加 label。</p><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>Event 是指存储库内会触发 workflow 运行的特定活动。比如，这个活动可以源自 Github 里，当某个人创建了一个 pull 请求，新建了一个 issue，或者 pushes 了一个 commit 到存储库里。</p><h3 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h3><p>job 是在同一个 runner 里执行的一系列 steps。每个 step 可以是一个用于执行的 shell 脚本，也可以是一个即将运行的 action. Steps 是按顺序执行的并且依赖于彼此。因为每个 step 都执行在同一个 runner ，所以你能在每一个 step 中共享数据。比如，你可以在一个 step 里创建你的应用程序，然后在该 step 的下一个 step 里测试这个构建好的应用程序。</p><p>你可以配置 job’s 之间的依赖。默认设置里，jobs 之间并没有依赖并且是并行执行的。但当一个 job 依赖于另一个 job 的时候，它会等待这个依赖的 job 执行完毕之后才开始执行。比如，你可能对不同的架构会有多个构建 jobs ，它们之间没有依赖。而在它们之后的一个打包 jobs 就得依赖于它们执行后的结果用于打包。这些构建 jobs 之间是并行的，当它们全部执行完毕的时候，打包 job 才会执行。</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>actions 是一个在 GitHub Actions 平台上用于执行复杂但是高频使用的重复性任务的自定义程序（比如 Git 的 Checkout ）。使用 action 有助于减少你在 workflow 文件里的重复性代码。一个 action 能够从 GitHub 中 pull 你的存储库，为你的构建环境配置正确的工具链，也能够配置你的 cloud provider 的 authentication。</p><p>你能够写自己的 actions，也能够从 GitHub Marketplace 中找到合适的 actions 用于你的 workflows。</p><h3 id="Runners"><a href="#Runners" class="headerlink" title="Runners"></a>Runners</h3><p>runner 是当 workflows 被触发时执行 workflows 的服务器。每个 runner 一次能运行一个 job。GitHub提供以下的 runner 用于执行你的 workflow。每个 workflow 在一个全新的、干净的虚拟机中执行。如果你需要一个不同系统或者需要指定的硬件配置，你可以使用自己的 runners。</p><table><thead><tr><th>Virtual environment</th><th>YANL workflow label</th><th>Notes</th></tr></thead><tbody><tr><td>Windows Server 2022</td><td>windows-latest or windows-2022</td><td>The windows-latest label currently uses the Windows Server 2022 runner image.</td></tr><tr><td>Windows Server 2019</td><td>windows-2019</td><td></td></tr><tr><td>Ubuntu 22.04</td><td>ubuntu-22.04</td><td>Ubuntu 22.04 is currently in public beta.</td></tr><tr><td>Ubuntu 20.04</td><td>ubuntu-latest or ubuntu-20.04</td><td></td></tr><tr><td>Ubuntu 18.04</td><td>ubuntu-18.04</td><td></td></tr><tr><td>macOS Monterey 12</td><td>macos-12</td><td>macOS 12 is currently in public beta.</td></tr><tr><td>macOS Big Sur 11</td><td>macos-latest or macos-11</td><td>The macos-latest label currently uses the macOS 11 runner image.</td></tr><tr><td>macOS Catalina 10.15</td><td>macos-10.15</td><td></td></tr></tbody></table><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><ol><li><p>创建 Github.io仓库 以及 blog-source-code仓库</p></li><li><p>在 Hexo 配置文件 config.yml 中配置好部署配置，使用 ssh 而不是 http 的方式，如</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: git</span><br>    <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">git@github.com:yourname/yourname.github.io.git</span><br>    <span class="hljs-attribute">branch</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li><li><p>然后，需要一个 SSH 部署密钥 (在部署的时候，Github Actions 需要推送文件到 yourname.github.io，为了安全，单独添加一个部署密钥)</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">ssh-keygen -f github-<span class="hljs-keyword">page</span>-deploy-<span class="hljs-keyword">key</span><br></code></pre></td></tr></table></figure></li></ol><p>       执行上述命令就可以生成 SSH 密钥对，公钥 github-page-deploy-key.pub 与 私钥        github-page-deply-key</p><ol start="4"><li><p>将私钥配置到blog源码仓库，打开 Setting -&gt; Actions -&gt; New repository secret，Name写DEPLOY_SECRET，Value是 github-page-deploy-key的内容</p></li><li><p>然后在 github.io 仓库中，添加公钥 github-page-deploy-key.pub，打开 Settings -&gt; Deploy keys -&gt; Add deploy key ，Title自定义，key 就是 公钥 github-page-deploy-key.pub的内容，然后勾选上 Allow write access</p></li><li><p>在博客仓库根目录下，创建 .github&#x2F;workflows&#x2F; 目录用于存储 workflow 文件</p></li><li><p>在 .github&#x2F;workflows&#x2F; 目录下，创建一个名为 hexo_deploy.yml 的文件并且添加以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This is a basic workflow to help you get started with Actions</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">Blog</span> <span class="hljs-string">deploy</span><br><br><span class="hljs-comment"># Controls when the workflow will run</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># Triggers the workflow on push or pull request events but only for the main branch</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br><br>  <span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># This workflow contains a single job called &quot;build&quot;</span><br>  <span class="hljs-attr">build-and-deploy:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># Steps represent a sequence of tasks that will be executed as part of the job</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment"># Runs a set of commands using the runners shell</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12&#x27;</span><br><br>      <span class="hljs-comment"># Cache node modules to accelerate</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">yarn</span> <span class="hljs-string">cache</span> <span class="hljs-string">directory</span> <span class="hljs-string">path</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">yarn-cache-dir-path</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;::set-output name=dir::$(yarn cache dir)&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">yarn</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">yarn-cache</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.yarn-cache-dir-path.outputs.dir</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-yarn-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/yarn.lock&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.os &#125;&#125;-yarn-</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">install</span> <span class="hljs-string">--prefer-offline</span> <span class="hljs-string">--frozen-lockfile</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_SECRET</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">          mkdir -p ~/.ssh</span><br><span class="hljs-string">          echo &quot;$DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">npx</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npx</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npx</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure></li><li><p>然后 commit 并 push 到仓库中。</p></li></ol><h4 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h4><p>为了方便理解，把关键代码解释一下。</p><hr><p><code>name: Blog deploy</code></p><p>Optional - 该工作流的名称，会显示在 GitHub 仓库中的 Actions 标签页内。</p><hr><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br></code></pre></td></tr></table></figure><p>指定该 workflow 的触发器。这几行表示，当 main 分支有人进行 push 操作时，将会触发该workflow</p><hr><p><code>jobs:</code></p><p>在 Blog deploy 这个 workflow 中运行的所有 jobs</p><hr><p><code>build-and-deploy:</code></p><p>定义一个名为 build-and-deploy 的 job。它的子键将会定义 job 的属性。</p><hr><p><code>runs-on: ubuntu-latest</code></p><p>这个 job 将会运行在组新版本的 Ubuntu Linux runner 中。这意味着该 job 将会执行在 GitHub 提供的一个干净的虚拟机中。</p><hr><p><code>steps:</code></p><p>在 build-and-deploy 这个 job 中执行的所有 steps。每个嵌套在该部分的是一个分离的 action 或者 shell 脚本。</p><hr><p><code>uses: actions/checkout@v2</code></p><p>uses 关键词指示该 step 将会执行 v2 版本的 actions&#x2F;checkout 的 action。这是一个用于 checks out 你的仓库到 runner 的 action。</p><hr><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br><span class="hljs-attr">with:</span> <br>  <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12&#x27;</span><br></code></pre></td></tr></table></figure><p>该 step 使用了 actions&#x2F;setup-node@v1 action 用于安装指定版本的 Node.js (这个代码指定的是 v12)。将会把 node 和 npm 命令添加到 runner 的环境变量中。</p><hr><p>这就是大概流程了。</p><h1 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h1><p>本来参考的资料是fluid里写的文章，然后省略的地方太多，看得莫名其妙。之后重新参考了别的文章。建议打算使用Github Action的小伙伴们。不要使用一个仓库两个分支保存静态页面和博客源码的方案。老老实实，源码和静态页面分开两个仓库。不然找不到什么好资料。</p><p>不知道说什么，hexo英文教程和中文教程推荐的不同，英文版推荐的是GitHub Actions，中文版推荐的是 Travis CI。不知道说什么。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hexo.io/docs/github-pages.html#comment-5863055242">Hexo官方文档</a></p><p><a href="https://docs.github.com/cn/actions/quickstart">GitHub Actions 快速入门</a></p><p><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">GitHub Actions 官方文档</a></p><p><a href="https://dreamhomes.top/posts/202111101556/">利用 Github Actions 自动化部署 Hexo 博客 | 梦家博客</a></p><p><a href="https://razeen.me/posts/use-github-action-to-deploy-your-hexo-blog/">Github Actions 初体验之自动化部署 Hexo 博客</a></p><p><a href="https://juejin.cn/post/6943895271751286821">如何使用 GitHub Actions 自动部署 Hexo 博客 - 掘金</a></p><p><a href="https://zkqiang.cn/posts/e8ed6836/">编写自己的 GitHub Action，体验自动化部署 - zkqiang&#39;s blog</a></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo打造GitHub Pages</title>
    <link href="/2022/06/09/%E4%BD%BF%E7%94%A8Hexo%E6%89%93%E9%80%A0GitHub%20Pages/"/>
    <url>/2022/06/09/%E4%BD%BF%E7%94%A8Hexo%E6%89%93%E9%80%A0GitHub%20Pages/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo打造GitHub-Pages"><a href="#使用Hexo打造GitHub-Pages" class="headerlink" title="使用Hexo打造GitHub Pages"></a>使用Hexo打造GitHub Pages</h1><h2 id="什么是GitHub-Pages？"><a href="#什么是GitHub-Pages？" class="headerlink" title="什么是GitHub Pages？"></a>什么是GitHub Pages？</h2><p>GitHub Pages就是GitHub提供给用户搭建一个简单的个人网站的服务。在这里，我们可以搭建自己的个人博客，然后进行技术分享。</p><h2 id="为什么要使用GitHub-Pages？"><a href="#为什么要使用GitHub-Pages？" class="headerlink" title="为什么要使用GitHub Pages？"></a>为什么要使用GitHub Pages？</h2><p>其实同类的还有gitee pages和gitlab pages，但是就是想接触新知识吧。所以就打算使用GitHub Pages。</p><h2 id="建站流程"><a href="#建站流程" class="headerlink" title="建站流程"></a>建站流程</h2><h3 id="创建GitHub-Pages"><a href="#创建GitHub-Pages" class="headerlink" title="创建GitHub Pages"></a>创建GitHub Pages</h3><p>在GitHub仓库下创建同名的仓库，username.github.io，比如我就是创建了justdoit366.github.io这个仓库。</p><h3 id="简单建站"><a href="#简单建站" class="headerlink" title="简单建站"></a>简单建站</h3><p>因为我使用的是Hexo来搭建GitHub Pages，本人对前端方面的知识也不是很了解，因此只能粗略的记录下建站的流程。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><h4 id="建站流程-1"><a href="#建站流程-1" class="headerlink" title="建站流程"></a>建站流程</h4><p>Node.js (version &gt; 12.x) + Git</p><ol><li><p>安装<br><code>npm install -g hexo-cli</code></p></li><li><p>安装完成后，执行以下命令，即可创建一个最简单的界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init &lt;folder&gt;<br>cd &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure></li><li><p>输入以下命令启动服务器，然后在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看内容<br><code>hexo server</code></p></li><li><p>配置好后，项目的基础结构如下:</p><hr><p>.<br>|— public<br>|— scaffolds<br>|— sources<br>|   |— _drafts<br>|   |— _posts<br>|— themes<br>|— _config.yml<br>|— _package.json</p><hr></li></ol><p>对项目结构进行的简单介绍：</p><ul><li>themes<br>主题文件夹。Hexo会根据主题来生成静态页面。</li><li>source<br>资源文件夹是存放用户资源的地方。除_posts文件夹之外，开头命名为_(下划线)的文件&#x2F;文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。</li><li>scaffolds<br>模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。<br>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果你修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</li><li>_config.yml<br>网站的配置信息，你可以在此配置大部分的参数。</li><li>package.json<br>应用程序的信息。EJS、Stylus和Mardown renderer已默认安装，可以自由移除。</li></ul><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>修改主题为：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><ol><li><p>下载 hexo-theme-fluid 的release版本到 themes目录，然后将解压出的文件夹重名为fluid。</p></li><li><p>修改 Hexo 博客目录中的 _config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>        <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CH</span>        <span class="hljs-comment"># 指定语言</span><br></code></pre></td></tr></table></figure></li><li><p>创建关于页<br><code>hexo new page about</code><br>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。<br>修改后的文件示例如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: about<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br>关于页在这里。<br></code></pre></td></tr></table></figure></li></ol><h3 id="简单部署"><a href="#简单部署" class="headerlink" title="简单部署"></a>简单部署</h3><p>Hexo提供了一条命令<br><code>hexo deploy</code><br>将静态网页直接推送到服务器上。<br>但是，在开始推送前必须在博客目录下的_config.yml中修改参数，例如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br></code></pre></td></tr></table></figure><p>也可以同时使用多个deployer, Hexo会按照顺序执行每个deployer。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deply:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">heroku</span><br>    <span class="hljs-attr">repo:</span><br></code></pre></td></tr></table></figure><p>支持的deployer有Git、Heroku、Netlify、Rsync、OpenShift、FTPSync等等，可参考官方文档：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p><p>因为，我使用的Git，所以记录的是Git的部署方法</p><ol><li><p>安装 hexo-deployer-git<br><code>npm install hexo-deployer-git --save</code></p></li><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br>  <span class="hljs-attr">message:</span> [<span class="hljs-string">message</span>]<br>  <span class="hljs-attr">email:</span> [<span class="hljs-string">git</span> <span class="hljs-string">email</span>]<br>  <span class="hljs-attr">name:</span> [<span class="hljs-string">git</span> <span class="hljs-string">user</span>]<br></code></pre></td></tr></table></figure></li><li><p>生成站点并推送至远程库。执行 hexo clean &amp;&amp; hexo deploy</p></li><li><p>登录 Github&#x2F;Gitlab，然后在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，站点就会显示在Github Pages中。</p></li></ol><p>原理：<br>当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。<br>此外，如果你的 Github Pages 需要使用 CNAME 文件自定义域名，请将 CNAME 文件置于 source 目录下，只有这样 hexo deploy 才能将 CNAME 文件一并推送至部署分支。</p><h3 id="简单写作"><a href="#简单写作" class="headerlink" title="简单写作"></a>简单写作</h3><ol><li><p>创建文章，进入source&#x2F;_post文件夹中，创建md文件。或者直接通过hexo new “文章名”</p></li><li><p>删除文章，进入source&#x2F;_post文件夹中，删除md文件。</p></li><li><p>创建或删除后，执行操作hexo clean、hexo g、hexo d。即可把更改推送到博客中。</p></li></ol><h3 id="图片保存"><a href="#图片保存" class="headerlink" title="图片保存"></a>图片保存</h3><p>个人觉得使用外链的图片不太好，万一链接的图片失效了，就很影响观感。</p><p>因此在刚建站的日子里，就使用 Hexo 推荐的方法吧。</p><p>在博客目录的 source 文件夹内创建 images文件夹。然后在里面保存图片 image.jpg，就可以通过下面的方式获取图片。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[](<span class="hljs-regexp">/images/im</span>age.jpg)<br></code></pre></td></tr></table></figure><h3 id="添加评论和访问统计"><a href="#添加评论和访问统计" class="headerlink" title="添加评论和访问统计"></a>添加评论和访问统计</h3><p>由于我使用的主题hexo-theme-fluid里支持了这些参数配置，因此很简单。<br>我使用的leancloud进行数据统计。</p><p>第一部分：配置leancloud</p><ol><li>注册leancloud账号。然后，点击创建应用。名字自定义，我起的是hexo。</li><li>双击应用名。进去就能看到该应用的后台管理页面。点击数据存储-&gt;结构化数据-&gt;创建Class</li><li>需要创建两个Class，一个名为Comment(评论)，另一个名为Counter(数据统计)。切记默认的ACL权限需要选无限制。</li><li>然后，在左边栏。点击 设置-&gt;应用凭证，该项里的AppID和AppKey以及服务器地址REST API服务器地址都是有用的。待会需要配置到fluid里。</li><li>接着，点击安全中心，在Web安全域名中，加入自己的网站名即可。</li></ol><p>第二部分：把leancloud的信息同步到fluid中</p><ol><li><p>配置访问统计，打开themes&#x2F;fluid&#x2F;_config.yml文件，修改以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 网页访问统计</span><br> <span class="hljs-attr">web_analytics:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">leancloud:</span><br>     <span class="hljs-attr">app_id:</span> <span class="hljs-string">从leancloud获取的id</span><br>     <span class="hljs-attr">app_key:</span> <span class="hljs-string">从leancloud获取的key</span><br>     <span class="hljs-attr">server_url:</span> <span class="hljs-string">从leancloud获取的REST</span> <span class="hljs-string">API服务器地址</span> <br><span class="hljs-comment"># 页脚Footer</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 展示网站</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 统计数据的来源，使用leancloud需要设置前面的web_analytics</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量&#123;&#125;次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数&#123;&#125;人&quot;</span>      <br><span class="hljs-comment"># 文章页</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>配置评论，本人使用的valine插件，因为fluid内置了，而且leancloud也支持</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><br><span class="hljs-comment"># valine 基于 LeanCloud</span><br><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-string">leancloud中获取</span> <br>  <span class="hljs-attr">appKey:</span> <span class="hljs-string">leancloud中获取</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">REST_API服务器,leancloud中获取</span><br></code></pre></td></tr></table></figure></li><li><p>开启评论，在每个md文件的最上方Front-matter中，添加comments:true即可。</p></li><li><p>访问统计和评论均可在leancloud的Counter类和Comment类查看及管理。</p></li><li><p>在配置的过程中，碰上了以上配置全部正确，但是Valine评论不显示的问题。经过不断的摸索，hexo s –debug查看配置文件之后，确定配置无误。接着在网页html源码中搜索valine发现是存在该模块的，但是却不显示。原因是，fluid配置的静态资源获取不到。修改后，即可以成功加载。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">static_prefix:</span><br>  <span class="hljs-comment"># valine: https://lib.baomitu.com/valine/1.4.8/</span><br>  <span class="hljs-comment"># 从上面修改为下面的源即可，本人对前端不太熟悉，目前只能解析到这里了。</span><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://unpkg.com/valine/dist/</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li><p>hexo deploy报错</p><p>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">Token authentication requirements for Git operations | The GitHub Blog</a> for more information.</p><p>解决方法：</p><hr><p>Create Personal Access Token on GitHubFrom your GitHub account, go to Settings &#x3D;&gt; Developer Settings &#x3D;&gt;<br>Personal Access Token &#x3D;&gt; Generate New Token (Give your password) &#x3D;&gt; Fillup the form &#x3D;&gt; click Generate token &#x3D;&gt;<br>Copy the generated Token, it will be something like ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta<br>Now follow below method based on your machine:<br>For Windows OS ⤴Go to Credential Manager from Control Panel &#x3D;&gt; Windows Credentials &#x3D;&gt; find git:<a href="https://github.com/">https://github.com</a> &#x3D;&gt;<br>Edit &#x3D;&gt; On Password replace with with your GitHub Personal Access Token &#x3D;&gt; You are Done<br>If you don’t find git:<a href="https://github.com/">https://github.com</a> &#x3D;&gt; Click on Add a generic credential &#x3D;&gt;<br>Internet address will be git:<a href="https://github.com/">https://github.com</a> and you need to type in your username and password will be your GitHub Personal Access Token &#x3D;&gt; Click Ok and you are done</p><hr></li><li><p>解决npm WARN config global <code>--global</code>, <code>--local</code> are deprecated. Use <code>--location=global</code> instead.</p><p>解决方法：</p><hr><p>将npm升级到最新版本即可<br>升级方法</p><ol><li><p>在windows中以管理员身份打开cmd，然后执行命令 <code>npm install -g npm-windows-upgrade</code></p></li><li><p>更改脚本策略<br>下载Windows Power Shell<br>然后以管理员身份运行，执行命令 <code>set-ExecutionPolicy RemoteSigned</code> 输入Y<br>成功更改脚本策略</p></li><li><p>在Windows Power Shell上运行命令 <code>npm-windows-upgrade</code></p></li></ol><hr></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li>官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li><a href="https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to">https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to</a></li><li>Git学习之查看config配置：<a href="https://www.jianshu.com/p/1ae2ff6c90de">https://www.jianshu.com/p/1ae2ff6c90de</a></li><li><a href="https://blog.csdn.net/lezeqe/article/details/125129428">https://blog.csdn.net/lezeqe/article/details/125129428</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deploy_test</title>
    <link href="/2022/06/08/deploy_test/"/>
    <url>/2022/06/08/deploy_test/</url>
    
    <content type="html"><![CDATA[<h1 id="deploy-test"><a href="#deploy-test" class="headerlink" title="deploy test"></a>deploy test</h1><h1 id="update-time-15-29"><a href="#update-time-15-29" class="headerlink" title="update time: 15:29"></a>update time: 15:29</h1><h1 id="update-time-16-05"><a href="#update-time-16-05" class="headerlink" title="update time: 16:05"></a>update time: 16:05</h1><h1 id="update-time-16-13"><a href="#update-time-16-13" class="headerlink" title="update time: 16:13"></a>update time: 16:13</h1><h1 id="update-time-16-29"><a href="#update-time-16-29" class="headerlink" title="update time: 16:29"></a>update time: 16:29</h1><h1 id="update-time-22-19"><a href="#update-time-22-19" class="headerlink" title="update time: 22:19"></a>update time: 22:19</h1><h1 id="update-time-9-54"><a href="#update-time-9-54" class="headerlink" title="update time: 9:54"></a>update time: 9:54</h1><h1 id="update-time-11-09"><a href="#update-time-11-09" class="headerlink" title="update time: 11:09"></a>update time: 11:09</h1>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
